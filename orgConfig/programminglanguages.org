* Programming Languages
** Python
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package python
  :defer t
  :mode ("\\.py" . python-mode)
  :config
  (setq python-indent-offset 4))

(use-package lsp-python-ms
  :ensure nil
  :hook (python-mode . lsp)
  :config

  ;; for dev build of language server
  (setq lsp-python-ms-dir
        (expand-file-name "~/app/python-language-server/output/bin/Release/"))
  ;; for executable of language server, if it's not symlinked on your PATH
  (setq lsp-python-ms-executable
        "~/app/python-language-server/output/bin/Release/Microsoft.Python.LanguageServer"))
#+END_SRC

** Scala

Add all the needed components for scala:
  * scala mode
  * sbt mode

#+BEGIN_SRC emacs-lisp :tangle yes

;; Enable scala-mode and sbt-mode
(use-package scala-mode
  :mode "\\.s\\(cala\\|bt\\)$"
  :config (add-hook 'scala-mode-hook 'hs-minor-mode))

(use-package sbt-mode
  :commands sbt-start sbt-command
  :config
  ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
  ;; allows using SPACE when in the minibuffer
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map))
#+END_SRC
** Haskell
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package haskell-mode
    :mode ("\\.purs$" "\\.hs$") ;;enable the mode for purescript as well
    :config
    (add-hook 'haskell-mode-hook #'interactive-haskell-mode)
    (add-hook 'haskell-mode-hook #'haskell-doc-mode)
    (setq haskell-stylish-on-save t)
    )

  ;; hlint extension (requires hlint installed with cabal)
  (use-package flymake-haskell-multi
    :config
    (add-hook 'haskell-mode-hook 'flymake-haskell-multi-load))

  ;; Displays hlint suggestion in minibuffer
  (use-package flymake-cursor
    )

  ;; hindent (require hindente installed with cabal)
  (use-package hindent

    :config
    (add-hook 'haskell-mode-hook #'hindent-mode)
    (setq hindent-style "johan-tibell"))
#+END_SRC
** Latex
#+BEGIN_SRC emacs-lisp :tangle yes
;; LaTeX configuration


(use-package tex
:defer t
 :ensure auctex
 :config
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)

(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
(add-hook 'LaTeX-mode-hook 'yas-minor-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(setq TeX-PDF-mode t)

(setq TeX-output-view-style
    (quote
     (("^pdf$" "." "evince -f %o")))))

(unless (boundp 'org-export-latex-classes)
  (setq org-export-latex-classes nil))

;; Org xelatex
;; 'djcb-org-article' for export org documents to the LaTex 'article', using
;; XeTeX and some fancy fonts; requires XeTeX (see org-latex-to-pdf-process)
(add-to-list 'org-export-latex-classes
	     '("xebeamer"
	       "\\documentclass[11pt]{beamer}
\\usepackage[T1]{fontenc}
\\usepackage{fontspec}
\\usepackage{graphicx}
\\usepackage{geometry}
\\geometry{a4paper, textwidth=6.5in, textheight=10in,
            marginparsep=7pt, marginparwidth=.6in}

      \\usetheme{{{{beamertheme}}}}\n
      \\usecolortheme{{{{beamercolortheme}}}}\n
      \\beamertemplateballitem\n
      \\setbeameroption{show notes}
      \\usepackage[utf8]{inputenc}\n
      \\usepackage[T1]{fontenc}\n
      \\usepackage{hyperref}\n
      \\usepackage{color}
      \\usepackage{listings}
      \\lstset{numbers=none,language=[ISO]C++,tabsize=4,
  frame=single,
  basicstyle=\\small,
  showspaces=false,showstringspaces=false,
  showtabs=false,
  keywordstyle=\\color{blue}\\bfseries,
  commentstyle=\\color{red},
  }\n
      \\usepackage{verbatim}\n
      \\institute{{{{beamerinstitute}}}}\n
       \\subject{{{{beamersubject}}}}\n"

		    ("\\section{%s}" . "\\section*{%s}")

		    ("\\begin{frame}[fragile]\\frametitle{%s}"
		     "\\end{frame}"
		     "\\begin{frame}[fragile]\\frametitle{%s}"
		     "\\end{frame}")))

;; allow for export=>beamer

;; #+LaTeX_CLASS: beamer in org files
(add-to-list 'org-export-latex-classes
	     ;; beamer class, for presentations
	     '("beamer"
	            "\\documentclass[11pt]{beamer}\n
      \\mode<{{{beamermode}}}>\n
      \\usetheme{{{{beamertheme}}}}\n
      \\usecolortheme{{{{beamercolortheme}}}}\n
      \\beamertemplateballitem\n
      \\setbeameroption{show notes}
      \\usepackage[utf8]{inputenc}\n
      \\usepackage[T1]{fontenc}\n
      \\usepackage{hyperref}\n
      \\usepackage{color}
      \\usepackage{listings}
      \\lstset{numbers=none,language=[ISO]C++,tabsize=4,
  frame=single,
  basicstyle=\\small,
  showspaces=false,showstringspaces=false,
  showtabs=false,
  keywordstyle=\\color{blue}\\bfseries,
  commentstyle=\\color{red},
  }\n
      \\usepackage{verbatim}\n
      \\institute{{{{beamerinstitute}}}}\n
       \\subject{{{{beamersubject}}}}\n"

		    ("\\section{%s}" . "\\section*{%s}")

		    ("\\begin{frame}[fragile]\\frametitle{%s}"
		     "\\end{frame}"
		     "\\begin{frame}[fragile]\\frametitle{%s}"
		     "\\end{frame}")))

;; letter class, for formal letters
(add-to-list 'org-export-latex-classes

	     '("letter"
	            "\\documentclass[11pt]{letter}\n
      \\usepackage[utf8]{inputenc}\n
      \\usepackage[T1]{fontenc}\n
      \\usepackage{color}"

		    ("\\section{%s}" . "\\section*{%s}")
		    ("\\subsection{%s}" . "\\subsection*{%s}")
		    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		    ("\\paragraph{%s}" . "\\paragraph*{%s}")
		         ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

;; Uses xelatex, just in case I want to have fancy fonts
(setq org-latex-pdf-process
      '("xelatex -interaction nonstopmode %f"))

#+END_SRC
** Web-mode

#+begin_src emacs-lisp :tangle yes
(use-package lorem-ipsum)
#+end_src
** Json-mode

#+begin_src emacs-lisp :tangle yes
(use-package json-mode)
#+end_src
** Typescript

#+begin_src emacs-lisp :tangle yes
(use-package typescript-mode
  :defer t
  :mode "\\.\\(ts\\|tsx\\)\\'"
)
#+end_src
** Markdown
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package markdown-mode
  :mode (("\\.md\\'" . gfm-mode)
         ("\\.markdown\\'" . gfm-mode))
  :config
  (setq markdown-fontify-code-blocks-natively t)
  :preface
  (defun jekyll-insert-image-url ()
    (interactive)
    (let* ((files (directory-files "../assets/images"))
           (selected-file (completing-read "Select image: " files nil t)))
      (insert (format "![%s](/assets/images/%s)" selected-file selected-file))))

  (defun jekyll-insert-post-url ()
    (interactive)
    (let* ((files (remove "." (mapcar #'file-name-sans-extension (directory-files "."))))
           (selected-file (completing-read "Select article: " files nil t)))
      (insert (format "{%% post_url %s %%}" selected-file)))))
#+END_SRC
** Elisp
   #+begin_src emacs-lisp :tangle yes
(use-package s)
   #+end_src
