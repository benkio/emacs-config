* Formatting

  Functions for formatting code.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun xml-format ()
  "indent an xml file using xlint on a region or buffer"
  (interactive)
  (let (pos1 pos2 bds)
    (if (use-region-p)
        (setq pos1 (region-beginning) pos2 (region-end))
        (setq pos1 (point-min) pos2 (point-max)))

    (condition-case nil
        (save-excursion
          (shell-command-on-region pos1 pos2 "xmllint --format -" (buffer-name) t)
          )
      (error (message "Please install xmllint"))
      )
    )
  )

(defun apply-case-char (startcol endcol function)
  "apply the function to the char at start position. endcol not used"
  (move-to-column startcol t)
  (let ((c (string (following-char))))
    (delete-char 1)
    (insert (funcall function c)))
  )

(defun upcase-first-region (begin end)
  "Uppercase the first char of each line of the selected region"
  (interactive "r")
  (apply-on-rectangle 'apply-case-char begin end 'upcase)
  )

;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
        ;; This would override `fill-column' if it's an integer.
        (emacs-lisp-docstring-fill-column t))
    (fill-paragraph nil region)))

#+END_SRC
