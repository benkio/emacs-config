* Typescript Functions

  Functions useful when dealing with typescript.

#+BEGIN_SRC emacs-lisp :tangle yes

    (defun ts-shell-clean-old-output ()
      "When called on a shell buffer this function goes back to the beginning of the last compilation and delete the rest (old compilation)"
      (interactive)
      (funcall 'shell-clean-old-output "\\(<s> \\[webpack\\.Progress\\] 100% \\|ðŸ“¦  Building\\)")
      )

    (defun ts-event-file-navigation (&optional notSplitWindow)
      "Navigate to the file that has a problem. it can navigate using a
      different window."
      (previous-line) ;; Often called from the line AFTER the actual file path targeted
      (funcall 'event-file-navigation (regexp-quote "[tsl] ERROR in ") "(" notSplitWindow)
      )

    (defun ts-goto-next-warn-error (&optional errorMessage backwardSearch isRegexp)
      "Search into an typescript output for the first warning/error, starting from cursor position, and move to it"
      (interactive)

      (goto-next-warn-error 'ts-event-file-navigation ".*TS.*: " "," ")" '(lambda () (progn
                                                                                       (other-window -1)
                                                                                       (next-line)
                                                                                       (end-of-line)
                                                                                       (other-window 1)) ) errorMessage backwardSearch isRegexp)
      )

    (defun ts-extract-code-line-or-region (name &optional parameters from to)
      "Extract the code to val or def:
       Require:
         - Name of the val/def
         - Optional list of parameters (if empty it will be a val)

       if no code region is selected then it extracts the rest of the line from current position
       Return type not specified.
      "
      (interactive (list
                    (read-string "value/function name: " )
                    (progn
                      (setq
                       separator (read-string "insert separartor(,): " nil nil ",")
                       param (read-string "param name (RET to finish): ")
                       params nil
                       )
                      (while (not (equal "" (s-trim param)))
                        (push (s-trim param) params)
                        (setq param (read-string "param name (RET to finish): "))
                        )
                      (reverse (cons (car params) (mapcar (lambda (x) (concat x separator)) (cdr params))))
                      )
                    (if (use-region-p) (region-beginning) (point))
                    (if (use-region-p) (region-end) (line-end-position))
                    ))
      (funcall 'extract-code-line-or-region-template "var " "function " " = " " { \n return " ";" ";\n }" name parameters from to)
      )

    (defun ts-build-import-from-existing-import-or-source (type startingBuffer)
      "Considering the cursor is at the beginning of the target import line
       or into the typescript source file containing the definition of the
      target file. This functions return the import to insert into the
      dependent typescript source file."
      (if (string= (current-word) "import")
          (copy-line-from-point-as-string) ;; copy import line
        (concat "import { " type " } from '" (s-chop-suffixes '(".ts" ".tsx" ".ts.html") (file-relative-name (buffer-file-name) startingBuffer))  "';")
        )
      )

    (defun ts-import-type-at-point (type)
      "Try to import into the current file the type at point"
      (interactive (list
                    (read-string (format "type (%s): " (thing-at-point 'word))
                                 nil nil (thing-at-point 'word))))
      (funcall 'build-import
               type
               (lambda (type) (concat "^import .*" " " type "[ ,]" ".*} from '.*';$"))
               (lambda (type) (concat "\\(.*class " inputType ".*\\|.*interface " inputType ".*\\|.*type " inputType ".*\\)"))
               'ts-build-import-from-existing-import-or-source
               (lambda (result) (save-excursion
                                  (beginning-of-buffer)
                                  (newline)
                                  (previous-line)
                                  (insert result)
                                  ))
               )
      )

    (defun ts-import-bounds ()
      "Return the import region bounds"
      (save-excursion
        (search-backward-regexp "\\({\\|import\\)")
        (if (char-equal (char-after (point)) ?{)
            (progn
              (setq startBracketPoint (point))
              (search-backward-regexp "\\({\\|import\\)")
              (setq startOfImport (point))
              (goto-char startBracketPoint)
              (goto-char (cdr (bounds-of-thing-at-point 'sexp)))
              (list startOfImport (line-end-position))
              )
          (progn

            (setq startOfImport (point)
                  endOfImport (if (char-equal (char-before (line-end-position)) ?{)
                                  (progn
                                    (end-of-line)
                                    (goto-char (cdr (bounds-of-thing-at-point 'sexp)))
                                    (line-end-position)
                                    )
                                (line-end-position)
                                ))
            (list startOfImport endOfImport)
            )
          ))
      )

    (defun ts-remove-unused-import ()
      "Parse a shell output in search of the first unused import and remove it"
      (interactive)
      (funcall 'remove-unused-import
               ".*is declared but.*$"
               'ts-goto-next-warn-error
               'ts-import-bounds
               (lambda (targetType)
                 (if (search-forward "," nil t)
                     (progn ;; multi import
                       (goto-char targetType)
                       (setq targetTypeBounds (bounds-of-thing-at-point 'word))
                       (setq startKillTypeTarget (car targetTypeBounds))
                       (setq endKillTypeTarget (cdr targetTypeBounds))
                       (kill-region startKillTypeTarget endKillTypeTarget)
                       (if (search-backward "," nil t)
                           (progn
                             (search-forward ",")
                             (delete-backward-char 1)
                             )
                         (delete-forward-char 1)
                         )
                       )
                   (delete-region (point-min) (point-max))           ;; single import
                   )
                 )
               )
      )

    (global-set-key (kbd "C-c c t c") 'ts-shell-clean-old-output)
    (global-set-key (kbd "C-c c t e") 'ts-goto-next-warn-error)
    (global-set-key (kbd "C-c c t u") 'ts-remove-unused-import)
    (global-set-key (kbd "C-c c t p") 'ts-import-type-at-point)
    (global-set-key (kbd "C-c c t x") 'ts-extract-code-line-or-region)

#+END_SRC
