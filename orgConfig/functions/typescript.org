* Typescript Functions

  Functions useful when dealing with typescript.

#+begin_src emacs-lisp :tangle yes

(defun ts-shell-clean-old-output ()
  "When called on a shell buffer this function goes back to the beginning of the last compilation and delete the rest (old compilation)"
  (interactive)
  (funcall 'shell-clean-old-output "<s> [webpack.Progress] 100% ")
  )

(defun ts-event-file-navigation (&optional notSplitWindow)
  "Navigate to the file that has a problem. it can navigate using a
  different window."
  (previous-line) ;; Often called from the line AFTER the actual file path targeted
  (funcall 'event-file-navigation (regexp-quote "[tsl] ERROR in ") "(" notSplitWindow)
  )

(defun ts-goto-next-warn-error (&optional errorMessage backwardSearch)
  "Search into an typescript output for the first warning/error, starting from cursor position, and move to it"
  (interactive)
  (unless errorMessage (setq errorMessage ""))
  (setq searchRegexp (concat ".*TS.*: " (regexp-quote errorMessage)))
  (condition-case
      nil
      (funcall (searchFunction backwardSearch) searchRegexp)
    (error (user-error "no match found for %s" errorMessage))
    )
  (ts-event-file-navigation t)
  (other-window -1)

  (parse-go-to-line-or-column "," 'goto-line)
  (other-window -1)

  (parse-go-to-line-or-column ")" 'right-char)
  (other-window -1)
  (next-line)
  (end-of-line)
  (other-window 1)
  )

(defun ts-extract-code-line-or-region (name &optional parameters from to)
  "Extract the code to val or def:
   Require:
     - Name of the val/def
     - Optional list of parameters (if empty it will be a val)

   if no code region is selected then it extracts the rest of the line from current position
   Return type not specified.
  "
  (interactive (list
                (read-string "value/function name: " )
                (progn
                  (setq
                   separator (read-string "insert separartor(,): " nil nil ",")
                   param (read-string "param name (RET to finish): ")
                   params nil
                   )
                  (while (not (equal "" (s-trim param)))
                    (push (s-trim param) params)
                    (setq param (read-string "param name (RET to finish): "))
                    )
                  (reverse (cons (car params) (mapcar (lambda (x) (concat x separator)) (cdr params))))
                  )
                (if (use-region-p) (region-beginning) (point))
                (if (use-region-p) (region-end) (line-end-position))
                ))
  (funcall 'extract-code-line-or-region-template "var " "function " " = " " { \n return " ";" ";\n }" name parameters from to)
  )

(global-set-key (kbd "C-c c t c") 'ts-shell-clean-old-output)
(global-set-key (kbd "C-c c t e") 'ts-goto-next-warn-error)
(global-set-key (kbd "C-c c t x") 'ts-extract-code-line-or-region)
#+end_src
