* DotNet

  Functions used specifically for dealing with dotnet code.
  It depends on the functions defined into `languageTemplateFunctions.org`

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun dotnet-event-file-navigation (&optional notSplitWindow)
    "Navigate to the file that has a problem. it can navigate using a
    different window."
    (funcall 'event-file-navigation "^" "(" notSplitWindow)
    )

  (defun dotnet-build-import-from-existing-import-or-source (type startingBuffer)
    "Considering the cursor is at the beginning of the target import line
     or into the .net source file containing the definition of the
    target file. This functions return the import to insert into the
    dependent .net source file."
    (message "test")
    (if (string= (current-word) "using")
        (copy-line-from-point-as-string) ;; copy import line
      (concat "using " (type-namespace) ";") ;; copy namespace and make it an import
      )
    )

  (defun type-namespace ()
    "return the namespace of the current file"
    (save-excursion
      (beginning-of-buffer)
      (search-forward "namespace ")
      (buffer-substring-no-properties (point) (line-end-position))
      )
    )

  ; keybinded functions ;;;;;;;;;;;;;;;;;
  (defun dotnet-shell-clean-old-output ()
    "When called on a shell buffer this function goes back to the beginning of the last compilation and delete the rest (old compilation)"
    (interactive)
    (funcall 'shell-clean-old-output "^Build .*$")
    )

  (defun dotnet-goto-next-warn-error (&optional errorMessage backwardSearch isRegexp)
    "Search into an sbt output for the first warning/error, starting from cursor position, and move to it"
    (interactive)
    (forward-line)
    (goto-next-warn-error 'dotnet-event-file-navigation ".*\\.cs.*" "," ")" '(lambda () (progn
                                                                                          (other-window -1)
                                                                                          (left-char)) ) errorMessage backwardSearch isRegexp)
    )

  (defun dotnet-import-type-at-point (type)
    "Try to import into the current file the type at point"
    (interactive (list
                  (read-string (format "type (%s): " (thing-at-point 'word))
                               nil nil (thing-at-point 'word))))
    (funcall 'build-import
             type
             (lambda (type) (concat "using.*" type "$"))
             (lambda (type) (concat "\\(.*class " inputType ".*\\|.*interface " inputType ".*\\|.*enum " inputType ".*\\)"))
             'dotnet-build-import-from-existing-import-or-source
             (lambda (result) (save-excursion
                                (beginning-of-buffer)
                                (newline)
                                (previous-line)
                                (insert result)
                                ))
             )
    )

  (defun dotnet-extract-code-line-or-region (name &optional parameters from to)
    "Extract the code to val or def:
     Require:
       - Name of the val/def
       - Optional list of parameters (if empty it will be a val)

     if no code region is selected then it extracts the rest of the line from current position
     Return type not specified.
    "
    (interactive (list
                  (read-string "value/function name: " )
                  (progn
                    (setq
                     param (read-string "param name (RET to finish): ")
                     params nil
                     )
                    (while (not (equal "" (s-trim param)))
                      (push (s-trim param) params)
                      (setq param (read-string "param name (RET to finish): "))
                      )
                    (concat "(" (mapconcat 'identity (reverse params) ", ") ")")
                    )
                  (if (use-region-p) (region-beginning) (point))
                  (if (use-region-p) (region-end) (line-end-position))
                  ))
    (funcall 'extract-code-line-or-region-template "var " "public void " " = " " { " nil "}" name parameters from to)
    )

  (global-set-key (kbd "C-c c d c") 'dotnet-shell-clean-old-output)
  (global-set-key (kbd "C-c c d e") 'dotnet-goto-next-warn-error)
  (global-set-key (kbd "C-c c d p") 'dotnet-import-type-at-point)
  (global-set-key (kbd "C-c c d x") 'dotnet-extract-code-line-or-region)
#+END_SRC
