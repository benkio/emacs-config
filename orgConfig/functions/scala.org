* Scala

  Functions used specifically for dealing with scala code

  #+BEGIN_SRC emacs-lisp :tangle yes

        (defun scala-goto-next-warn-error ()
          "Search into an sbt output for the first warning/error, starting from cursor position, and move to it"
          (interactive)
          ;; Parse and Navigate to file
          (search-forward ".scala")
          (beginning-of-line)
          (search-forward "] ")
          (setq filenamePathPos (point))
          (search-forward ":")
          (left-char)
          (setq filePath (buffer-substring filenamePathPos (point)))
          (other-window 1)
          (find-file filePath)
          (other-window -1)

          ;; Parse and navigate to line
          (right-char)
          (setq filenamePathPos (point))
          (search-forward ":")
          (left-char)
          (setq fileLine (buffer-substring filenamePathPos (point)))
          (other-window 1)
          (goto-line (string-to-number fileLine))
          (other-window -1)

          ;; Parse and navigate to column
          (right-char)
          (setq filenamePathPos (point))
          (search-forward ":")
          (left-char)
          (setq fileColumn (buffer-substring filenamePathPos (point)))
          (other-window 1)
          (right-char (string-to-number fileColumn))
        )

        (global-set-key (kbd "C-c c s e") 'scala-goto-next-warn-error)

      (defun scala-import-type-at-point (type)
        "Try to import into the current file the type at point"
        (interactive (list
                    (read-string (format "type (%s): " (thing-at-point 'word))
                                 nil nil (thing-at-point 'word))))
        (setq importToAdd (funcall 'scala-build-import type))

        (if importToAdd
          (save-excursion
            (beginning-of-buffer)
            (next-line)
            (newline)
            (insert importToAdd))
          (user-error "Unable to find import for the type %s" type)
          )
      )

      (defun scala-build-import (type)
        (setq missingTypeImport nil)
        (setq initialPosition (point))
        (setq initialBuffer (current-buffer))

        (sbt-find-definitions type)
        (set-process-sentinel
          (get-process "grep")
          (lambda (p e)
            "A callback attached to grep after the call to sbt-find-definitions"
              (sleep-for 1)
              (redisplay)
              (if (string= e "finished\n")
                  (progn
                      ;; grep was successful
                      (when (not (string= major-mode "scala-mode"))
                         (switch-to-buffer "*grep*")
                         (next-error)
                      )
                      (message "buffer-name %s " (buffer-name))
                      (beginning-of-buffer)
                      (search-forward "package ")
                      (setq typePackageStartingPoint (point))
                      (end-of-line)
                      (setq missingTypeImport (concat "import " (buffer-substring-no-properties typePackageStartingPoint (point)) "." type))
                    )
                  (setq missingTypeImport (funcall 'scala-build-import-ag type)))
             (kill-buffer "*grep*")
        ))
        (sleep-for 1)
        (when missingTypeImport (delete-window))
        (switch-to-buffer initialBuffer)
        (goto-char initialPosition)
        (eval missingTypeImport)
    )

    (defun scala-build-import-ag (type)
      (message "called ag")
      (setq missingTypeImport nil)
      (setq agBuffer nil)
      (ag-project-regexp (concat "import.*\." type "$"))
      (set-process-sentinel
        (get-process "ag")
        (lambda (p e)
          "A callback attached to grep after the call to sbt-find-definitions"
          (redisplay)
          (switch-to-existing-buffer-other-window "*ag search regexp:import")
          (setq agBuffer (current-buffer))
          (when (string= e "finished\n")
            (compilation-next-error 1)
            (search-forward ":import ")
            (setq missingTypeStartingPoint (point))
            (end-of-line)
            (setq missingTypeImport (concat "import " (buffer-substring-no-properties missingTypeStartingPoint (point))))
          )
      ))
      (sleep-for 1)
      (message "buffer ag %s " agBuffer)
      (kill-buffer agBuffer)
      (eval missingTypeImport)
    )

      (defun scala-import-type-not-found ()
        "Search into an sbt output for the first missing import, search the for the type, copy the right import and add it to the failing file"
        (interactive)
        (search-forward "not found: type ")
        (setq missingImport (funcall 'scala-build-import (thing-at-point 'word)))
        (beginning-of-line)
        (search-forward "] ")
        (setq filenamePathPos (point))
        (search-forward ":")
        (left-char)
        (setq filePath (buffer-substring-no-properties filenamePathPos (point)))
        (other-window 1)
        (find-file filePath)

        (beginning-of-buffer)
        (next-line)
        (newline)
        (insert missingTypeImport)
        (other-window -1)
       )

       (global-set-key (kbd "C-c c s i") 'scala-import-type-not-found)
  #+END_SRC
